/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class RNCWebViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNCWebViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public RNCWebViewManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "allowFileAccess":
        mViewManager.setAllowFileAccess(view, value == null ? false : (boolean) value);
        break;
      case "allowsProtectedMedia":
        mViewManager.setAllowsProtectedMedia(view, value == null ? false : (boolean) value);
        break;
      case "allowsFullscreenVideo":
        mViewManager.setAllowsFullscreenVideo(view, value == null ? false : (boolean) value);
        break;
      case "androidLayerType":
        mViewManager.setAndroidLayerType(view, (String) value);
        break;
      case "cacheMode":
        mViewManager.setCacheMode(view, (String) value);
        break;
      case "domStorageEnabled":
        mViewManager.setDomStorageEnabled(view, value == null ? false : (boolean) value);
        break;
      case "downloadingMessage":
        mViewManager.setDownloadingMessage(view, value == null ? null : (String) value);
        break;
      case "forceDarkOn":
        mViewManager.setForceDarkOn(view, value == null ? false : (boolean) value);
        break;
      case "geolocationEnabled":
        mViewManager.setGeolocationEnabled(view, value == null ? false : (boolean) value);
        break;
      case "lackPermissionToDownloadMessage":
        mViewManager.setLackPermissionToDownloadMessage(view, value == null ? null : (String) value);
        break;
      case "messagingModuleName":
        mViewManager.setMessagingModuleName(view, value == null ? null : (String) value);
        break;
      case "minimumFontSize":
        mViewManager.setMinimumFontSize(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "mixedContentMode":
        mViewManager.setMixedContentMode(view, (String) value);
        break;
      case "nestedScrollEnabled":
        mViewManager.setNestedScrollEnabled(view, value == null ? false : (boolean) value);
        break;
      case "overScrollMode":
        mViewManager.setOverScrollMode(view, value == null ? null : (String) value);
        break;
      case "saveFormDataDisabled":
        mViewManager.setSaveFormDataDisabled(view, value == null ? false : (boolean) value);
        break;
      case "scalesPageToFit":
        mViewManager.setScalesPageToFit(view, value == null ? false : (boolean) value);
        break;
      case "setBuiltInZoomControls":
        mViewManager.setSetBuiltInZoomControls(view, value == null ? false : (boolean) value);
        break;
      case "setDisplayZoomControls":
        mViewManager.setSetDisplayZoomControls(view, value == null ? false : (boolean) value);
        break;
      case "setSupportMultipleWindows":
        mViewManager.setSetSupportMultipleWindows(view, value == null ? false : (boolean) value);
        break;
      case "textZoom":
        mViewManager.setTextZoom(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "thirdPartyCookiesEnabled":
        mViewManager.setThirdPartyCookiesEnabled(view, value == null ? false : (boolean) value);
        break;
      case "hasOnScroll":
        mViewManager.setHasOnScroll(view, value == null ? false : (boolean) value);
        break;
      case "allowingReadAccessToURL":
        mViewManager.setAllowingReadAccessToURL(view, value == null ? null : (String) value);
        break;
      case "allowsBackForwardNavigationGestures":
        mViewManager.setAllowsBackForwardNavigationGestures(view, value == null ? false : (boolean) value);
        break;
      case "allowsInlineMediaPlayback":
        mViewManager.setAllowsInlineMediaPlayback(view, value == null ? false : (boolean) value);
        break;
      case "allowsPictureInPictureMediaPlayback":
        mViewManager.setAllowsPictureInPictureMediaPlayback(view, value == null ? false : (boolean) value);
        break;
      case "allowsAirPlayForMediaPlayback":
        mViewManager.setAllowsAirPlayForMediaPlayback(view, value == null ? false : (boolean) value);
        break;
      case "allowsLinkPreview":
        mViewManager.setAllowsLinkPreview(view, value == null ? false : (boolean) value);
        break;
      case "automaticallyAdjustContentInsets":
        mViewManager.setAutomaticallyAdjustContentInsets(view, value == null ? false : (boolean) value);
        break;
      case "autoManageStatusBarEnabled":
        mViewManager.setAutoManageStatusBarEnabled(view, value == null ? false : (boolean) value);
        break;
      case "bounces":
        mViewManager.setBounces(view, value == null ? false : (boolean) value);
        break;
      case "contentInset":
        mViewManager.setContentInset(view, (ReadableMap) value);
        break;
      case "contentInsetAdjustmentBehavior":
        mViewManager.setContentInsetAdjustmentBehavior(view, (String) value);
        break;
      case "contentMode":
        mViewManager.setContentMode(view, (String) value);
        break;
      case "dataDetectorTypes":
        mViewManager.setDataDetectorTypes(view, (ReadableArray) value);
        break;
      case "decelerationRate":
        mViewManager.setDecelerationRate(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "directionalLockEnabled":
        mViewManager.setDirectionalLockEnabled(view, value == null ? false : (boolean) value);
        break;
      case "enableApplePay":
        mViewManager.setEnableApplePay(view, value == null ? false : (boolean) value);
        break;
      case "hideKeyboardAccessoryView":
        mViewManager.setHideKeyboardAccessoryView(view, value == null ? false : (boolean) value);
        break;
      case "keyboardDisplayRequiresUserAction":
        mViewManager.setKeyboardDisplayRequiresUserAction(view, value == null ? false : (boolean) value);
        break;
      case "limitsNavigationsToAppBoundDomains":
        mViewManager.setLimitsNavigationsToAppBoundDomains(view, value == null ? false : (boolean) value);
        break;
      case "mediaCapturePermissionGrantType":
        mViewManager.setMediaCapturePermissionGrantType(view, (String) value);
        break;
      case "pagingEnabled":
        mViewManager.setPagingEnabled(view, value == null ? false : (boolean) value);
        break;
      case "pullToRefreshEnabled":
        mViewManager.setPullToRefreshEnabled(view, value == null ? false : (boolean) value);
        break;
      case "refreshControlLightMode":
        mViewManager.setRefreshControlLightMode(view, value == null ? false : (boolean) value);
        break;
      case "scrollEnabled":
        mViewManager.setScrollEnabled(view, value == null ? false : (boolean) value);
        break;
      case "sharedCookiesEnabled":
        mViewManager.setSharedCookiesEnabled(view, value == null ? false : (boolean) value);
        break;
      case "textInteractionEnabled":
        mViewManager.setTextInteractionEnabled(view, value == null ? false : (boolean) value);
        break;
      case "useSharedProcessPool":
        mViewManager.setUseSharedProcessPool(view, value == null ? false : (boolean) value);
        break;
      case "menuItems":
        mViewManager.setMenuItems(view, (ReadableArray) value);
        break;
      case "suppressMenuItems":
        mViewManager.setSuppressMenuItems(view, (ReadableArray) value);
        break;
      case "hasOnFileDownload":
        mViewManager.setHasOnFileDownload(view, value == null ? false : (boolean) value);
        break;
      case "fraudulentWebsiteWarningEnabled":
        mViewManager.setFraudulentWebsiteWarningEnabled(view, value == null ? false : (boolean) value);
        break;
      case "allowFileAccessFromFileURLs":
        mViewManager.setAllowFileAccessFromFileURLs(view, value == null ? false : (boolean) value);
        break;
      case "allowUniversalAccessFromFileURLs":
        mViewManager.setAllowUniversalAccessFromFileURLs(view, value == null ? false : (boolean) value);
        break;
      case "applicationNameForUserAgent":
        mViewManager.setApplicationNameForUserAgent(view, value == null ? null : (String) value);
        break;
      case "basicAuthCredential":
        mViewManager.setBasicAuthCredential(view, (ReadableMap) value);
        break;
      case "cacheEnabled":
        mViewManager.setCacheEnabled(view, value == null ? false : (boolean) value);
        break;
      case "incognito":
        mViewManager.setIncognito(view, value == null ? false : (boolean) value);
        break;
      case "injectedJavaScript":
        mViewManager.setInjectedJavaScript(view, value == null ? null : (String) value);
        break;
      case "injectedJavaScriptBeforeContentLoaded":
        mViewManager.setInjectedJavaScriptBeforeContentLoaded(view, value == null ? null : (String) value);
        break;
      case "injectedJavaScriptForMainFrameOnly":
        mViewManager.setInjectedJavaScriptForMainFrameOnly(view, value == null ? false : (boolean) value);
        break;
      case "injectedJavaScriptBeforeContentLoadedForMainFrameOnly":
        mViewManager.setInjectedJavaScriptBeforeContentLoadedForMainFrameOnly(view, value == null ? false : (boolean) value);
        break;
      case "javaScriptCanOpenWindowsAutomatically":
        mViewManager.setJavaScriptCanOpenWindowsAutomatically(view, value == null ? false : (boolean) value);
        break;
      case "javaScriptEnabled":
        mViewManager.setJavaScriptEnabled(view, value == null ? false : (boolean) value);
        break;
      case "webviewDebuggingEnabled":
        mViewManager.setWebviewDebuggingEnabled(view, value == null ? false : (boolean) value);
        break;
      case "mediaPlaybackRequiresUserAction":
        mViewManager.setMediaPlaybackRequiresUserAction(view, value == null ? false : (boolean) value);
        break;
      case "messagingEnabled":
        mViewManager.setMessagingEnabled(view, value == null ? false : (boolean) value);
        break;
      case "hasOnOpenWindowEvent":
        mViewManager.setHasOnOpenWindowEvent(view, value == null ? false : (boolean) value);
        break;
      case "showsHorizontalScrollIndicator":
        mViewManager.setShowsHorizontalScrollIndicator(view, value == null ? false : (boolean) value);
        break;
      case "showsVerticalScrollIndicator":
        mViewManager.setShowsVerticalScrollIndicator(view, value == null ? false : (boolean) value);
        break;
      case "newSource":
        mViewManager.setNewSource(view, (ReadableMap) value);
        break;
      case "userAgent":
        mViewManager.setUserAgent(view, value == null ? null : (String) value);
        break;
      case "injectedJavaScriptObject":
        mViewManager.setInjectedJavaScriptObject(view, value == null ? null : (String) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }

  @Override
  public void receiveCommand(T view, String commandName, @Nullable ReadableArray args) {
    switch (commandName) {
      case "goBack":
        mViewManager.goBack(view);
        break;
      case "goForward":
        mViewManager.goForward(view);
        break;
      case "reload":
        mViewManager.reload(view);
        break;
      case "stopLoading":
        mViewManager.stopLoading(view);
        break;
      case "injectJavaScript":
        mViewManager.injectJavaScript(view, args.getString(0));
        break;
      case "requestFocus":
        mViewManager.requestFocus(view);
        break;
      case "postMessage":
        mViewManager.postMessage(view, args.getString(0));
        break;
      case "loadUrl":
        mViewManager.loadUrl(view, args.getString(0));
        break;
      case "clearFormData":
        mViewManager.clearFormData(view);
        break;
      case "clearCache":
        mViewManager.clearCache(view, args.getBoolean(0));
        break;
      case "clearHistory":
        mViewManager.clearHistory(view);
        break;
    }
  }
}
